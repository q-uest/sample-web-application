pipeline 
{
    agent any
    environment {
        BUILD_COMPLETE=false
        STATUS_CODE=0
    }
    stages {
        
        stage('Build') {
            failFast true
            parallel 
            {
                stage('Building') {
                    steps 
                    {
                        
                        sh "mvn clean install  |  tee output.log"

                        sh '! grep "WARNING" output.log'

                        script 
                        {
                            BUILD_COMPLETE = true
                        }
                    }
                }
            
                stage('Monitoring the logs!!') 
                {
                        steps 
                        {
                            echo "This is monitoring Logs !!"
                            sh '! grep "WARNING" output.log;'

                            
                        script
                        {    
                            echo "STATUS_CODE=${STATUS_CODE}"
                            while ( STATUS_CODE != 999 ) 
                            {
                                
                                echo "this is inside Monitoring logs...."
                                sh '! grep "WARNING" output.log'
                                STATUS_CODE=sh( 
                                    script: "if [ -s output.log ]; then ! grep  'WARNING' output.log;rs=${?};if [ $rs -eq 0 ];then  exit 999; else  exit 0;fi;fi",
                                      returnStatus: true)
                                
                                echo " Still in While Loop.......STATUS_CODE=${STATUS_CODE}"
                                                              
                                
                            }
                                echo "STATUS_CODE=${STATUS_CODE}"
                                if (STATUS_CODE==999)
                                {
                                    sh 'exit 1'
                                }
                        }
                                                        
                        }
                    }
                }
            }
        }
}
